---
# Step 1: Ensure we're on CentOS
- name: Install EPEL repository (CentOS/RedHat)
  yum:
    name: epel-release
    state: present
  when: ansible_facts['os_family'] == "RedHat"

# Clean yum cache after adding EPEL
- name: Clean yum cache after adding EPEL
  command: yum clean all
  when: ansible_facts['os_family'] == "RedHat"

# Install Python3 and pip3 (CentOS/RedHat)
- name: Install Python3 and pip3
  yum:
    name:
      - python3
      - python3-pip
    state: present
  when: ansible_facts['os_family'] == "RedHat"

# Ensure pip3 is installed using Python 3's built-in installer
- name: Ensure pip3 is installed via Python 3
  command: python3 -m ensurepip --upgrade
  when: ansible_facts['os_family'] == "RedHat"

# Upgrade pip3 if necessary
- name: Upgrade pip3 to the latest version
  command: python3 -m pip install --upgrade pip
  when: ansible_facts['os_family'] == "RedHat"

# Update all packages (CentOS and Amazon Linux)
- name: Update all packages (CentOS and Amazon Linux)
  yum:
    name: "*"
    state: latest
  when: ansible_facts['os_family'] == "RedHat"

# Install required packages for Docker (CentOS and Amazon Linux)
- name: Install required packages for Docker (CentOS and Amazon Linux)
  yum:
    name:
      - yum-utils
      - device-mapper-persistent-data
      - lvm2
    state: present

# Add Docker CE repository (CentOS)
- name: Add Docker CE repository (CentOS)
  yum_repository:
    name: docker-ce
    description: Docker CE Repository
    baseurl: https://download.docker.com/linux/centos/7/x86_64/stable
    gpgcheck: yes
    gpgkey: https://download.docker.com/linux/centos/gpg
  when: ansible_facts['distribution'] == "CentOS"

# Remove old Docker versions if they exist
- name: Remove old Docker versions
  yum:
    name:
      - docker
      - docker-common
      - docker-selinux
      - docker-engine
    state: absent
  when: ansible_facts['os_family'] == "RedHat"

# Install Docker
- name: Install Docker
  yum:
    name: docker-ce
    state: present
  when: ansible_facts['os_family'] == "RedHat"

# Ensure the 'docker' group exists (AFTER Docker is installed)
- name: Ensure Docker group exists
  group:
    name: docker
    state: present

# Start and enable Docker service
- name: Start and enable Docker service
  systemd:
    name: docker
    state: started
    enabled: yes

# Add user to Docker group
- name: Add user to Docker group
  user:
    name: "{{ ansible_user }}"
    groups: docker
    append: yes
  when: ansible_distribution == "CentOS"

# Install Docker Compose
- name: Install Docker Compose
  get_url:
    url: "https://github.com/docker/compose/releases/download/v2.5.1/docker-compose-{{ ansible_system }}-{{ ansible_architecture }}"
    dest: /usr/local/bin/docker-compose
    mode: '0755'
  retries: 3
  delay: 10
  register: download_status
  until: download_status is succeeded

# Ensure Docker Compose is executable
- name: Ensure Docker Compose is executable
  file:
    path: /usr/local/bin/docker-compose
    mode: '0755'
    state: file

# Debug Docker Compose version
- debug:
    var: compose_version.stdout
