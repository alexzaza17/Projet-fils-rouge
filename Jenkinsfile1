pipeline {
    environment {
        IMAGE_NAME = "ic-webapp"
        CONTAINER_APP_PORT = "8080"
        APP_EXPOSED_PORT = "83"
        DOCKERHUB_ID = "alexzaza"
        DOCKERHUB_PASSWORD = credentials('dockerhub_password')
        IMAGE_TAG = "1.0"  // Added to ensure it's set
        ANSIBLE_IMAGE_AGENT = "registry.gitlab.com/robconnolly/docker-ansible:latest"
    }
    agent none
    stages {
        stage('Build image') {
            agent any
            steps {
                script {
                    sh 'docker build --no-cache -f ./Dockerfile_v1.0 -t alexzaza/$IMAGE_NAME:$IMAGE_TAG .'
                }
            }
        }
        stage('Run container based on built image') {
            agent any
            steps {
                script {
                    sh '''
                        echo "Cleaning existing container if it exists"
                        docker ps -a | grep -i $IMAGE_NAME && docker rm -f ${IMAGE_NAME}
                        docker run --name $IMAGE_NAME -d -p ${APP_EXPOSED_PORT}:${CONTAINER_APP_PORT} alexzaza/$IMAGE_NAME:$IMAGE_TAG
                        sleep 5
                    '''
                }
            }
        }
        stage('Test image') {
            agent any
            steps {
                script {
                    sh '''
                        echo "Testing container..."
                        curl -I http://192.168.56.10:83 | grep -i "200"
                        sleep 5
                    '''
                }
            }
        }
        stage('Clean Container') {
            agent any
            steps {
                script {
                    sh '''
                        docker stop $IMAGE_NAME
                        docker rm $IMAGE_NAME
                    '''
                }
            }
        }
        stage ('Login and Push Image on docker hub') {  
            agent any
            steps {
                script {
                    sh '''
                        echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_ID --password-stdin
                        docker push ${DOCKERHUB_ID}/$IMAGE_NAME:$IMAGE_TAG
                    ''' 
                }
            } 
        }
        stage ('Ansible environment encours') {
          agent any
          environment {
            VAULT_KEY = credentials('vault_key')
            PRIVATE_KEY = credentials('private_key')
          }
          steps {
             script {
               sh '''
                  echo $VAULT_KEY > vault.key
                  echo $PRIVATE_KEY > id_rsa
                  chmod 600 id_rsa
               '''
             }
          }
        }

       stage ('deployment l appli ') {
         agent { docker { image 'registry.gitlab.com/robconnolly/docker-ansible:latest' } }
         stages {
             stage (" Install role Ansible") {
               steps {
                 script {
                     sh 'echo launch ansible-galaxy install -r roles/requirement.yml if needed'
                 }
              }
          }

           stage("Ping targeted hosts") {
             #agent {
               #docker {
                #image 'centos:7'
                 # args '-u root'  // To ensure you have root privileges
                #}
              #}
              steps {
                script {
                  sh '''
                    apt update -y
                    apt install sshpass -y
                    export ANSIBLE_CONFIG=/var/jenkins_home/workspace/ic-webapp/Ansible/ansible.cfg
                    ansible all -m ping --private-key id_rsa -l prod
             '''
        }
    }
}


            stage ("Check synthax the plabook")  {
              steps {
                script {
                    sh '''
                       export ANSIBLE_CONFIG=/var/jenkins_home/workspace/ic-webapp/Ansible/ansible.cfg
                       ansible-lint -x 306 Ansible/playbooks/* || echo passing linter
                       echo ${GIT_BRANCH}
                       '''
                    }
                 }
              }

            stage ("Deployment de l App en prod")  {
                when { expression { GIT_BRANCH == 'origin/main'}}
                stages {
                   stage ("Production install de docker on all hosts") {
                      steps {
                        script {
                           sh '''
                               export ANSIBLE_CONFIG=$(pwd)/Ansible/ansible.cfg
                               ansible-playbook  Ansible/playbooks/docker-install.yml --vault-password-file vault.key --private-key id_rsa -l odoo_server,pgadmin_server
                           '''
                    }
                 }
              }

                stage ("Deployment de ic-webapp")  {
                      steps {
                        script {
                           sh '''
                               export ANSIBLE_CONFIG=$(pwd)/Ansible/ansible.cfg
                               ansible-playbook  Ansible/playbooks/ic-webapp-deploy.yml --vault-password-file vault.key --private-key id_rsa -l ic_webapp_server
                       '''
                     }
                  }
                }

                stage ("Deployment de odoo")  {
                      steps {
                        script {
                           sh '''
                               export ANSIBLE_CONFIG=$(pwd)/Ansible/ansible.cfg
                               ansible-playbook  Ansible/playbooks/odoo-deploy.yml --vault-password-file vault.key --private-key id_rsa -l odoo_server
                       '''
                     }
                  }
                }

                 stage ("Deployment de pgadmin")  {
                      steps {
                        script {
                           sh '''
                               export ANSIBLE_CONFIG=$(pwd)/Ansible/ansible.cfg
                               ansible-playbook  Ansible/playbooks/pgadmin-deploy.yml --vault-password-file vault.key --private-key id_rsa -l pgadmin_server
                       '''
                     }
                  }
                
               }
            }                 
        }                 
    
    }
  }
 }
}
